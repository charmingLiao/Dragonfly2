// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rpc/cdnsystem/server/server.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	base "d7y.io/dragonfly/v2/pkg/rpc/base"
	cdnsystem "d7y.io/dragonfly/v2/pkg/rpc/cdnsystem"
	gomock "github.com/golang/mock/gomock"
)

// MockSeederServer is a mock of SeederServer interface.
type MockSeederServer struct {
	ctrl     *gomock.Controller
	recorder *MockSeederServerMockRecorder
}

// MockSeederServerMockRecorder is the mock recorder for MockSeederServer.
type MockSeederServerMockRecorder struct {
	mock *MockSeederServer
}

// NewMockSeederServer creates a new mock instance.
func NewMockSeederServer(ctrl *gomock.Controller) *MockSeederServer {
	mock := &MockSeederServer{ctrl: ctrl}
	mock.recorder = &MockSeederServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSeederServer) EXPECT() *MockSeederServerMockRecorder {
	return m.recorder
}

// GetPieceTasks mocks base method.
func (m *MockSeederServer) GetPieceTasks(arg0 context.Context, arg1 *base.PieceTaskRequest) (*base.PiecePacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPieceTasks", arg0, arg1)
	ret0, _ := ret[0].(*base.PiecePacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPieceTasks indicates an expected call of GetPieceTasks.
func (mr *MockSeederServerMockRecorder) GetPieceTasks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPieceTasks", reflect.TypeOf((*MockSeederServer)(nil).GetPieceTasks), arg0, arg1)
}

// ObtainSeeds mocks base method.
func (m *MockSeederServer) ObtainSeeds(arg0 context.Context, arg1 *cdnsystem.SeedRequest, arg2 chan<- *cdnsystem.PieceSeed) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ObtainSeeds", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// ObtainSeeds indicates an expected call of ObtainSeeds.
func (mr *MockSeederServerMockRecorder) ObtainSeeds(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ObtainSeeds", reflect.TypeOf((*MockSeederServer)(nil).ObtainSeeds), arg0, arg1, arg2)
}
