// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/rpc/scheduler/client/peer_packet_stream.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	scheduler "d7y.io/dragonfly/v2/pkg/rpc/scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockPeerPacketStream is a mock of PeerPacketStream interface.
type MockPeerPacketStream struct {
	ctrl     *gomock.Controller
	recorder *MockPeerPacketStreamMockRecorder
}

// MockPeerPacketStreamMockRecorder is the mock recorder for MockPeerPacketStream.
type MockPeerPacketStreamMockRecorder struct {
	mock *MockPeerPacketStream
}

// NewMockPeerPacketStream creates a new mock instance.
func NewMockPeerPacketStream(ctrl *gomock.Controller) *MockPeerPacketStream {
	mock := &MockPeerPacketStream{ctrl: ctrl}
	mock.recorder = &MockPeerPacketStreamMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPeerPacketStream) EXPECT() *MockPeerPacketStreamMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockPeerPacketStream) Recv() (*scheduler.PeerPacket, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*scheduler.PeerPacket)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockPeerPacketStreamMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockPeerPacketStream)(nil).Recv))
}

// Send mocks base method.
func (m *MockPeerPacketStream) Send(pr *scheduler.PieceResult) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", pr)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockPeerPacketStreamMockRecorder) Send(pr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockPeerPacketStream)(nil).Send), pr)
}
