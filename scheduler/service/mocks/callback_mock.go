// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler/service/callback.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	set "d7y.io/dragonfly/v2/pkg/container/set"
	scheduler "d7y.io/dragonfly/v2/pkg/rpc/scheduler"
	resource "d7y.io/dragonfly/v2/scheduler/resource"
	gomock "github.com/golang/mock/gomock"
)

// MockCallback is a mock of Callback interface.
type MockCallback struct {
	ctrl     *gomock.Controller
	recorder *MockCallbackMockRecorder
}

// MockCallbackMockRecorder is the mock recorder for MockCallback.
type MockCallbackMockRecorder struct {
	mock *MockCallback
}

// NewMockCallback creates a new mock instance.
func NewMockCallback(ctrl *gomock.Controller) *MockCallback {
	mock := &MockCallback{ctrl: ctrl}
	mock.recorder = &MockCallbackMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCallback) EXPECT() *MockCallbackMockRecorder {
	return m.recorder
}

// BeginOfPiece mocks base method.
func (m *MockCallback) BeginOfPiece(arg0 context.Context, arg1 *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeginOfPiece", arg0, arg1)
}

// BeginOfPiece indicates an expected call of BeginOfPiece.
func (mr *MockCallbackMockRecorder) BeginOfPiece(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginOfPiece", reflect.TypeOf((*MockCallback)(nil).BeginOfPiece), arg0, arg1)
}

// EndOfPiece mocks base method.
func (m *MockCallback) EndOfPiece(arg0 context.Context, arg1 *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "EndOfPiece", arg0, arg1)
}

// EndOfPiece indicates an expected call of EndOfPiece.
func (mr *MockCallbackMockRecorder) EndOfPiece(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndOfPiece", reflect.TypeOf((*MockCallback)(nil).EndOfPiece), arg0, arg1)
}

// PeerFail mocks base method.
func (m *MockCallback) PeerFail(arg0 context.Context, arg1 *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerFail", arg0, arg1)
}

// PeerFail indicates an expected call of PeerFail.
func (mr *MockCallbackMockRecorder) PeerFail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerFail", reflect.TypeOf((*MockCallback)(nil).PeerFail), arg0, arg1)
}

// PeerLeave mocks base method.
func (m *MockCallback) PeerLeave(arg0 context.Context, arg1 *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerLeave", arg0, arg1)
}

// PeerLeave indicates an expected call of PeerLeave.
func (mr *MockCallbackMockRecorder) PeerLeave(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerLeave", reflect.TypeOf((*MockCallback)(nil).PeerLeave), arg0, arg1)
}

// PeerSuccess mocks base method.
func (m *MockCallback) PeerSuccess(arg0 context.Context, arg1 *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PeerSuccess", arg0, arg1)
}

// PeerSuccess indicates an expected call of PeerSuccess.
func (mr *MockCallbackMockRecorder) PeerSuccess(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PeerSuccess", reflect.TypeOf((*MockCallback)(nil).PeerSuccess), arg0, arg1)
}

// PieceFail mocks base method.
func (m *MockCallback) PieceFail(arg0 context.Context, arg1 *resource.Peer, arg2 *scheduler.PieceResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PieceFail", arg0, arg1, arg2)
}

// PieceFail indicates an expected call of PieceFail.
func (mr *MockCallbackMockRecorder) PieceFail(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PieceFail", reflect.TypeOf((*MockCallback)(nil).PieceFail), arg0, arg1, arg2)
}

// PieceSuccess mocks base method.
func (m *MockCallback) PieceSuccess(arg0 context.Context, arg1 *resource.Peer, arg2 *scheduler.PieceResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "PieceSuccess", arg0, arg1, arg2)
}

// PieceSuccess indicates an expected call of PieceSuccess.
func (mr *MockCallbackMockRecorder) PieceSuccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PieceSuccess", reflect.TypeOf((*MockCallback)(nil).PieceSuccess), arg0, arg1, arg2)
}

// ScheduleParent mocks base method.
func (m *MockCallback) ScheduleParent(arg0 context.Context, arg1 *resource.Peer, arg2 set.SafeSet) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ScheduleParent", arg0, arg1, arg2)
}

// ScheduleParent indicates an expected call of ScheduleParent.
func (mr *MockCallbackMockRecorder) ScheduleParent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ScheduleParent", reflect.TypeOf((*MockCallback)(nil).ScheduleParent), arg0, arg1, arg2)
}

// TaskFail mocks base method.
func (m *MockCallback) TaskFail(arg0 context.Context, arg1 *resource.Task) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskFail", arg0, arg1)
}

// TaskFail indicates an expected call of TaskFail.
func (mr *MockCallbackMockRecorder) TaskFail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskFail", reflect.TypeOf((*MockCallback)(nil).TaskFail), arg0, arg1)
}

// TaskSuccess mocks base method.
func (m *MockCallback) TaskSuccess(arg0 context.Context, arg1 *resource.Task, arg2 *scheduler.PeerResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TaskSuccess", arg0, arg1, arg2)
}

// TaskSuccess indicates an expected call of TaskSuccess.
func (mr *MockCallbackMockRecorder) TaskSuccess(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskSuccess", reflect.TypeOf((*MockCallback)(nil).TaskSuccess), arg0, arg1, arg2)
}
