// Code generated by MockGen. DO NOT EDIT.
// Source: scheduler/service/service.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	scheduler "d7y.io/dragonfly/v2/pkg/rpc/scheduler"
	resource "d7y.io/dragonfly/v2/scheduler/resource"
	scheduler0 "d7y.io/dragonfly/v2/scheduler/scheduler"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// CDN mocks base method.
func (m *MockService) CDN() resource.CDN {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CDN")
	ret0, _ := ret[0].(resource.CDN)
	return ret0
}

// CDN indicates an expected call of CDN.
func (mr *MockServiceMockRecorder) CDN() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CDN", reflect.TypeOf((*MockService)(nil).CDN))
}

// HandlePeer mocks base method.
func (m *MockService) HandlePeer(arg0 context.Context, arg1 *resource.Peer, arg2 *scheduler.PeerResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePeer", arg0, arg1, arg2)
}

// HandlePeer indicates an expected call of HandlePeer.
func (mr *MockServiceMockRecorder) HandlePeer(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePeer", reflect.TypeOf((*MockService)(nil).HandlePeer), arg0, arg1, arg2)
}

// HandlePeerLeave mocks base method.
func (m *MockService) HandlePeerLeave(ctx context.Context, peer *resource.Peer) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePeerLeave", ctx, peer)
}

// HandlePeerLeave indicates an expected call of HandlePeerLeave.
func (mr *MockServiceMockRecorder) HandlePeerLeave(ctx, peer interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePeerLeave", reflect.TypeOf((*MockService)(nil).HandlePeerLeave), ctx, peer)
}

// HandlePiece mocks base method.
func (m *MockService) HandlePiece(arg0 context.Context, arg1 *resource.Peer, arg2 *scheduler.PieceResult) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandlePiece", arg0, arg1, arg2)
}

// HandlePiece indicates an expected call of HandlePiece.
func (mr *MockServiceMockRecorder) HandlePiece(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandlePiece", reflect.TypeOf((*MockService)(nil).HandlePiece), arg0, arg1, arg2)
}

// LoadOrStoreHost mocks base method.
func (m *MockService) LoadOrStoreHost(arg0 context.Context, arg1 *scheduler.PeerTaskRequest) (*resource.Host, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStoreHost", arg0, arg1)
	ret0, _ := ret[0].(*resource.Host)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadOrStoreHost indicates an expected call of LoadOrStoreHost.
func (mr *MockServiceMockRecorder) LoadOrStoreHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStoreHost", reflect.TypeOf((*MockService)(nil).LoadOrStoreHost), arg0, arg1)
}

// LoadOrStorePeer mocks base method.
func (m *MockService) LoadOrStorePeer(arg0 context.Context, arg1 *scheduler.PeerTaskRequest, arg2 *resource.Task, arg3 *resource.Host) (*resource.Peer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadOrStorePeer", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*resource.Peer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadOrStorePeer indicates an expected call of LoadOrStorePeer.
func (mr *MockServiceMockRecorder) LoadOrStorePeer(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadOrStorePeer", reflect.TypeOf((*MockService)(nil).LoadOrStorePeer), arg0, arg1, arg2, arg3)
}

// LoadPeer mocks base method.
func (m *MockService) LoadPeer(arg0 string) (*resource.Peer, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadPeer", arg0)
	ret0, _ := ret[0].(*resource.Peer)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LoadPeer indicates an expected call of LoadPeer.
func (mr *MockServiceMockRecorder) LoadPeer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadPeer", reflect.TypeOf((*MockService)(nil).LoadPeer), arg0)
}

// RegisterTask mocks base method.
func (m *MockService) RegisterTask(arg0 context.Context, arg1 *scheduler.PeerTaskRequest) (*resource.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterTask", arg0, arg1)
	ret0, _ := ret[0].(*resource.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterTask indicates an expected call of RegisterTask.
func (mr *MockServiceMockRecorder) RegisterTask(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterTask", reflect.TypeOf((*MockService)(nil).RegisterTask), arg0, arg1)
}

// Scheduler mocks base method.
func (m *MockService) Scheduler() scheduler0.Scheduler {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Scheduler")
	ret0, _ := ret[0].(scheduler0.Scheduler)
	return ret0
}

// Scheduler indicates an expected call of Scheduler.
func (mr *MockServiceMockRecorder) Scheduler() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Scheduler", reflect.TypeOf((*MockService)(nil).Scheduler))
}
